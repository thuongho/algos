RAM
Variables are stored in random access memory (RAM). We sometimes call RAM "working memory" or just "memory."
Think of RAM like a really tall bookcase with a lot of shelves. Like, billions of shelves.
We call a shelf's number its address.
Each shelf holds 8 bits. A bit is a tiny electrical switch that can be turned "on" or "off." But instead of calling it "on" or "off" we call it 1 or 0.
8 bits is called a byte. So each shelf has one byte (8 bits) of storage.
Processor does all the work
Processor is connected to memory controller that has direct assess to the RAM
That direct connection is important. It means we can access address 0 and then immediately access address 918,873 without having to "climb down" our massive bookshelf of RAM.
That's why we call it Random Access Memory (RAM)—we can Access the bits at any Random address in Memory right away.
Cache Locality
Even though the memory controller can jump between far-apart memory addresses quickly, programs tend to access memory that's nearby. So computers are tuned to get an extra speed boost when reading memory addresses that're close to each other
The processor has a cache where it stores a copy of stuff it's recently read from RAM.
This cache is much faster to read from than RAM, so the processor saves time whenever it can read something from cache instead of going out to RAM.
When the processor asks for the contents of a given memory address, the memory controller also sends the contents of a handful of nearby memory addresses. And the processor puts all of it in the cache.
So if the processor asks for the contents of address 951, then 952, then 953, then 954...it'll go out to RAM once for that first read, and the subsequent reads will come straight from the super-fast cache.
But if the processor asks to read address 951, then address 362, then address 419...then the cache won't help, and it'll have to go all the way out to RAM for each read.

Binary Numbers
The number system we usually use (the one you probably learned in elementary school) is called base 10, because each digit has ten possible values (1, 2, 3, 4, 5, 6, 7, 8, 9, and 0).
But computers don't have digits with ten possible values. They have bits with two possible values. So they use base 2 numbers.
Base 10 is also called decimal. Base 2 is also called binary.
Notice how the places in base 10 (ones place, tens place, hundreds place, etc.) are sequential powers of 10:
10^0==1
10^1==10
10^2==100
10^3==1000
etc.
The places in binary (base 2) are sequential powers of 2:
2^0==1
2^1==2
2^2==4
2^3==8
etc.
So far we've been talking about unsigned integers ("unsigned" means non-negative, and "integer" means a whole number, not a fraction or decimal)
Fractions: Store two numbers: the numerator and the denominator.
Decimals: Also two numbers: 1) the number with the decimal point taken out, and 2) the position where the decimal point goes (how many digits over from the leftmost digit).
Negative Numbers: Reserve the leftmost bit for expressing the sign of the number. 0 for positive and 1 for negative
base 16, also called hexadecimal or hex.
In hex, our possible values for each digit are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, and f. Hex numbers are often prefixed with "0x" or "#".
In CSS, colors are sometimes expressed in hex. Interview Cake's signature blue color is "#5bc0de".

Fixed-width Integers
How many different numbers can we express with 1 byte (8 bits)?
2^8==256 different numbers. How did we know to take 2^8?
What happens if we have the number 255 in an 8-bit unsigned integer (1111 1111 in binary) and we add 1? The answer (256) needs a 9th bit (1 0000 0000). But we only have 8 bits!
This is called an integer overflow. At best, we might just get an error. At worst, our computer might compute the correct answer but then just throw out the 9th bit, giving us zero (0000 0000) instead of 256 (1 0000 0000)! (Javascript automatically converts the result to Infinity if it gets too big.)
The 256 possibilities we get with 1 byte are pretty limiting. So we usually use 4 or 8 bytes (32 or 64 bits) for storing integers.
32-bit integers have 2^32 possible values—more than 4 billion
64-bit integers have 2^64 possible values—more than 10 billion billion (10^19)
Ever created a table in SQL? When you specify that a column will hold integers, you have to specify how many bytes: 1 byte (tinyint), 2 bytes (smallint), 4 bytes (int), or 8 bytes (bigint).
Most integers are fixed-width or fixed-length, which means the number of bits they take up doesn't change.
So fixed-width integers are very space efficient and time efficient.
But that efficiency comes at a cost—their values are limited. Specifically, they're limited to 2^n possibilities, where nn is the number of bits.

Arrays
RAM is basically an array already
Just like with RAM, the elements of an array are numbered. We call that number the index of the array element (plural: indices). In this example, each array element's index is the same as its address in RAM
Together, this means looking up the contents of a given array index is O(1)O(1) time. This fast lookup capability is the most important property of arrays.
But the formula we used to get the address of the nnth item in our array only works if:
Each item in the array is the same size (takes up the same number of bytes).
The array is uninterrupted (contiguous) in memory. There can't be any gaps in the array...like to "skip over" a memory slot Spotify was already using.

Strings
A series of characters (letters, punctuation, etc.) is called a string.
We already know one way to store a series of things—arrays. But how can an array store characters instead of numbers?
Easy. Let's define a mapping between numbers and characters. Let's say "A" is 1 (or 0000 0001 in binary), "B" is 2 (or 0000 0010 in binary), etc. Bam. Now we have characters.
This mapping of numbers to characters is called a character encoding. One common character encoding is "ASCII". Here's how the alphabet is encoded in ASCII:
A: 01000001 S: 01010011 k: 01101011
B: 01000010 T: 01010100 l: 01101100
C: 01000011 U: 01010101 m: 01101101
D: 01000100 V: 01010110 n: 01111110
E: 01000101 W: 01010111 o: 01101111
F: 01000110 X: 01011000 p: 01110000
G: 01000111 Y: 01011001 q: 01110001
H: 01001000 Z: 01011010 r: 01110010
I: 01001001 a: 01100001 s: 01110011
J: 01001010 b: 01100010 t: 01110100
K: 01001011 c: 01100011 u: 01110101
L: 01001100 d: 01100100 v: 01110110
M: 01001101 e: 01100101 w: 01110111
N: 01001110 f: 01100110 x: 01111000
O: 01001111 g: 01100111 y: 01111001
P: 01010000 h: 01101000 z: 01111010
Q: 01010001 i: 01101001 
R: 01010010 j: 01101010


Pointers
Strings are arrays
store strings in an array
since each string can be different length, we'll store numbers in the array that points to different blocks containing the stored string
The pointers are marked with a * at the beginning. *457 -> 536[B,i,l,l]539