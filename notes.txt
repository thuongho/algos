Big O Rule Asymptotic Analysis
1. Worse case
2. Remove constants
3. Diff terms for Input
4. drop non dominant

- The 3 pillars of good code -
1. Readable
2. Time Complexity
3. Space Complexity

- What skills interviewer is looking for-
Analytic skills
- how can you think through problems and analyze things?
Coding skills 
- do you code well, by writing clean, simple, organized, readable code?
Technical knowledge 
- do you know the fundamentals of the job you're applying for?
Communication skills 
- does your personality match the companies' culture?

Know the "WHY" is this answer better than the other

-= How to solve a problem =-
1. When the interviewer says the question, write down the key points at the top (i.e. sorted array). Make sure you have all the details. Show how organized you are.
2. Make sure you double check: What are the inputs? What are the outputs?
3. What is the most important value of the problem? Do you have time, and space and memory,
etc.. What is the main goal?
4. Don't be annoying and ask too many questions.
5. Start with the naive/brute force approach. First thing that comes into mind. It shows that you’re able to think well and critically (you don't need to write this code, just speak about it).
6. Tell them why this approach is not the best (i.e. O(n^2) or higher, not readable, etc...)
7. Walk through your approach, comment things and see where you may be able to break things. Any repetition, bottlenecks like O(N^2), or unnecessary work? Did you use all the information the interviewer gave you? Bottleneck is the part of the code with the biggest Big O. Focus on that. Sometimes this occurs with repeated work as well.
8. Before you start coding, walk through your code and write down the steps you are going to follow.
9. Modularize your code from the very beginning. Break up your code into beautiful small pieces and add just comments if you need to.
10. Start actually writing your code now. Keep in mind that the more you prepare and understand what you need to code, the better the whiteboard will go. So never start a whiteboard interview not being sure of how things are going to work out. That is a recipe for disaster. Keep in mind: A lot of interviews ask questions that you won’t be able to fully answer on time. So think: What can I show in order to show that I can do this and I am better than other coders. Break things up in Functions (if you can’t remember a method, just make up a function and you will at least have it there. Write something, and start with the easy part.
11. Think about error checks and how you can break this code. Never make assumptions about the input. Assume people are trying to break your code and that Darth Vader is using your function. How will you safeguard it? Always check for false inputs that you don’t want. Here is a trick: Comment in the code, the checks that you want to do... write the function, then tell the interviewer that you would write tests now to make your function fail (but you won't need to actually write the tests).
12. Don’t use bad/confusing names like i and j. Write code that reads well.
13. Test your code: Check for no params, 0, undefined, null, massive arrays, async code, etc... Ask the interviewer if we can make assumption about the code. Can you make the answer return an error? Poke holes into your solution. Are you repeating yourself?
14. Finally talk to the interviewer where you would improve the code. Does it work? Are there different approaches? Is it readable? What would you google to improve? How can performance be improved? Possibly: Ask the interviewer what was the most interesting solution you have seen to this problem
15. If your interviewer is happy with the solution, the interview usually ends here. It is also common that the interviewer asks you extension questions, such as how you would handle the problem if the whole input is too large to fit into memory, or if the input arrives as a stream. This is a common follow-up question at Google, where they care a lot about scale. The answer is usually a divide-and-conquer approach — perform distributed processing of the data and only read certain chunks of the input from disk into memory, write the output back to disk and combine them later.

-= Good code checklist: =-
[ ] It works
[ ] Good use of data structures
[ ] Code Re-use/ Do Not Repeat Yourself
[ ] Modular - makes code more readable, maintainable and testable
[ ] Less than O(N^2). We want to avoid nested loops if we can since they are expensive. Two separate loops are better than 2 nested loops
[ ] Low Space Complexity --> Recursion can cause stack overflow, copying of large arrays may exceed memory of machine

-= Heurestics to ace the question: =-
[ ] Hash Maps are usually the answer to improve Time Complexity
[ ] If it's a sorted array, use Binary tree to achieve O(log N). Divide and Conquer - Divide a data set into smaller chunks and then repeating a process with a subset of data. Binary search is a great example of this
[ ] Try Sorting your input
[ ] Hash tables and precomputed information (i.e. sorted) are some of the best ways to optimize your code
[ ] Look at the Time vs Space tradeoff. Sometimes storing extra state in memory can help the time. (Runtime)
[ ] If the interviewer is giving you advice/tips/hints. Follow them
[ ] Space time tradeoffs: Hastables usually solve this a lot of the times. You use more space, but you can get a time optimization to the process. In programming, you often times can use up a little bit more space to get faster time

Space Complexity
- when a program executes, it has two ways to remember things
- heap
-- stores variables
- stack
-- stores function calls

What causes space complexity?
- variables
- data structures
- function calls
- allocation

CPU
- runs the computer
- has a really small cache 
- a common cache is called LRU Cache

RAM
- for computers to run code, need to keep track of variables
- volatile
- cpu access RAM faster
- massive storage area
- has shelves that are numbered (address)
- each shelf holds 8 bits
- 8 bits is a byte
- cpu is connected to a memory controller that does the read/write of the RAM
- the memory controller allows the cpu to access any address randomly instantly like a hash
- memory addresses that are close to each other are read faster (speed boost)
- a variable is stored in 32 bits or 4 addresses
- systems that are 8 bits can hold 255 11111111
- 16 bit 65,536
- integer overflow
- JS technically doesn't have int, it only has 64-bits floats
- Math.pow()
-- function that returns base to exponent
- Math.pow(6, 1000) >> Infinity
-- as the number becomes too big for RAM

Why is Data Structures important?
- we are thinking of the low level on how to make it faster and more efficient

Storage
- stores files
- permanent
- persistent storage is slow
- when computer shuts down it stores the application into storage

Arrays
- pros
-- fast lookup
-- fast push/pop
-- ordered
- cons
-- slow inserts
-- slow deletes
-- fixed size if using static arrays
- JS uses dynamic array, but sometimes under the hood it might copy the array by looping and build a larger array
-- sometimes append can be O(n)

Reference
- primitive type
-- type created by JS/ES
-- 1, null, true, 'hello', undefined, false
- reference type
-- type created by programmer
[] === []  // false
- arrays are objects

Context
- this
-- what object we are inside of
- this is what's to the left of the function being called
window.alert()
window is this for alert
const a = { b: function() { console.log(this)}}
a.b();
- this is a

Instantiation
- making a copy of an object and reusing the code

class Player {
  constructor(name, type) {
    this.name = name;
    this.type = type;
  }
  greet() {
    console.log(`hiiiii I'm ${this.name} and my skills are of ${this.type}`);
  }
}

class Wizard extends Player {
  constructor(name, type) {
    // since we are using extends, we must call super to inherit from Player
    super(name, type);
  }
  roar() {
    console.log(`I'm ${this.name} and my role is ${this.type}!!!`);
  }
}

Treat Strings as an array in interviews


Hash tables
- collisions
-- lookup goes from O(1) to O(n)
-- take up same memory space
-- use linked list

ES6
hash object
- only strings as keys
Map
- const a = new Map()
- lets you save functions as keys or whatever
- maintains insertion order
Set
- const b = new Set()
- only store keys

Hash
- pros
-- fast lookups
-- fast inserts
-- flexible lookup keys
- cons
-- unordered
-- slow key iteration cuz it has to look up the whole table

What is a hash function?
- a function that generates a value of fixed length for every input it gets
- it's one way, cannot figure out what the input is
- it will always give the same value
- idempotent
-- a function givent an input will always output the same output

Hash table
- key > hash function (really fast O(1)) > maps to an address in memory

What makes a good hash?
1. Fast O(1)
2. Doesn't cluster outputs at specific indices, but distributes uniformly
3 Deterministic (same input same output)

Hash_url = convert_to_base62(md5(original_url + random salt))(6)

Base 62
- Uses 62 possible ASCII letters 0-9, a-z, A-Z

bcrypt
- can hash password and salt for you

salt
- prefixed or appended to the key to hash out a unique hash
- prevent collisions of the same key/password
- random salt is stored in data store in plain text with hash and username

LinkedList
- pros
-- fast insertion
-- fast deletion
-- ordered
-- flexible size
- cons
-- slow lookup
-- more memory

Arrays
- cache locality
-- accessing their items in memory faster because they are next to each other

Static Array
- once you reach the limit of that array, it needs to double up in memory to expand


How does JS work
Explain the diff between async vs sync
Js is a single threaded language that can be non-blocking

what is a program
- revisit this video

Stacks & Queues
- pros
-- fast peek
-- fast operations
-- ordered
- cons
-- slow lookup


Trees

Balanced
- O(log n)

Unbalanced
- O(n)
- it is similar to linked list

Binary Search Tree
- pros
-- ordered
-- flexible size
-- better than O(n)
- cons
-- no O(1)


Red Black tree
- auto balance itself
- https://www.cs.usfca.edu/~galles/visualization/RedBlack.html

AVL tree
- auto balance itself
- https://visualgo.net/en/bst

Binary Heap
- max heap
-- root is the biggest number
- min heap
-- root is the smallest number
- balance
- no rules for left and right
- left and right can be any number as long as it is less than root

Priority queue
- left to right insertion
- move bigger number / higher priority up
- similar to airline with captain as priority over passenger eventhough the passenger came first

Binary Heap
- pros
-- better than O(n)
-- priority
-- flexible size
-- fast insert
- cons
-- slow lookup
- insert and delete is O(log n)

Trie
- contains empty root
- letters in nodes with child that forms words
- good for word search like google search
- if u know the length of the word, fast search
- looking car with 3 letters
-- find c, then go down child with depth of 3


Graphs
- cyclic
-- connected
-- nodes form a closed connection
- acyclic
-- not connected
- weighted
-- edges have numbers on it
-- google maps to find shortest path
- undirected
-- nodes can go both ways
- directed
-- nodes go in one direction

Edge List
- shows the edges that connects the nodes
Adjacent list
Adjacent matrix

Graphs
- pros
-- relationship
- cons
-- scaling is hard


Recursion
- Tail Call optimization
- everytime we're using tree or converting into tree
- divide a problem into smaller subproblems that are smaller instances of the same problem
- each instance of the subproblem is identical in nature
- the solutions of each subproblem can be combined to solve the problem at hand
- Merge Sort
- Quick Sort
- Tree Traversal
- Graph Traversal

Sorting
https://coggle.it/diagram/W5E5tqYlrXvFJPsq/t/master-the-interview-click-here-for-course-link

Insertion Sort
- use when data set is small or if the data set is nearly sorted
- small and nearly sorted it is the fastest

Merge Sort
- divide and conquer
- break down the middle to left and right
- recursively break down until one item

Quick Sort
- divide and conquer
- chooses one pivot point and then moves smaller number to the left and bigger to the right
- O(n log n) for time if pivot is somewhere in the middle
- worse case scenario if pivot is chose as the lowest or highest, then iterate through the whole list using (On^2) time and O(n log n) space
exercise: https://repl.it/@aneagoie/quickSort-exercise
solution: https://repl.it/@aneagoie/quickSort

Comparison Sort
- Bubble
- Insertion Sort
- Selection Sort
- Merge Sort
- Quick Sort

Non-comparison Sort
- Counting Sort
- Radix Sort


Traversals
DFS
//     9
//  4     20
//1  6  15  170
InOrder: [1, 4, 6, 9, 15, 20, 170]
PreOrder: [9, 4, 1, 6, 20, 15, 170]
PostOrder: [1, 6, 4, 15, 170, 20, 9]
space complexity is the height of the tree

Graphs
- BFS
-- shortest path
- DFS
-- does something exist
-- can get really slow, the deeper the graph, the more recursions add, 
-- the more space complexity cuz we have to keep track of all the function calls on the stack

Shortest path
- Bellman Ford algo is more effective than Dijkstra's algo cuz Bellman can account for negative edge
-- O(n^2)
-- not efficient and not fast
- Dijkstra
-- a little more efficient and faster
-- just can't handle negative numbers
https://medium.com/basecs/finding-the-shortest-path-with-a-little-help-from-dijkstra-613149fbdc8e


Dynamic programming
- divide & conquer + memoization
1. can be divided into subproblem
2. recursive solution
3. are there repetitive subproblems
4. memoize subproblems
5. demand a raise from your boss


4 Heroes
- Technical
- Successful
- Leadership
- Challenge

Tell me about yourself
- your triggers of success
- mention things you want to be asked
- skills should be relevant to the job
- answer in about a minute
- hero journey where you go from very little skill to someone they want to hire

Why us?
- make them feel special
- I've been researching your company and you did x. I worked on y project and relate it
- show you want to grow
- demonstrate why you are the best

Why did you leave your last company?
- no negativity
- show them you want to grow
- this is the best opportunity to grow
- show them why you are the best

Tell me about a problem and how you solved it
- have this prepared
- have metrics and numbers
- scaling performance security
- ideally a big project from the past company u worked with
- SAR (situation action result)

Tell me about an interesting project
- show how you are different
- relate it to the job

What is your biggest weakness
- sometimes I dive into coding too fast and it might not always come to the best answer
- now I'm writing pseudo codes before I write real code
- helps me visualize the 

Any questions for me?
- focus on them, YOU
- mention something they mentioned
1. what's the biggest mistake you've made during ur first month of the job and what did you do to fix it
2. where do u see this company going in the next 3 years
- you worked here for awhile and I want to see where this company is headed
3. why did you join this company
4. have you seen your skills grow in the past few years
5. the one time you messed up and how it was handled by the company
6. whats the one you wished someone told you when you first started working for the company

https://github.com/viraptor/reverse-interview

Secret weapon
- simplicity over complexity
-- when you work on a project with coworkers, you want to make code readable and not overcomplicate things
-- you want to make sure that the code is readable and maintainable long after you
- premature optimization is the root of all evil
-- don't be obsessed with optimization if the time spent on it is only 1% increase
- overall goal, not myopic
-- see the overall goal and not by narrowminded
-- the client wants to have a dashboard by a deadline to showcase for a meeting with the higherups
-- I organized a meeting with the coworkers and focus on delivery. It wasn't the most efficient code at delivery, but we 
were able to deliver a working product that allowed us to gain approval from higher ups that lead to long term contracts
-- once delivered we came back and refactored the code to be more efficient
- No complaining about client/code/etc
- No ego
-- we work as a team, take constructive feedback

After the interview
- thank the interviewer, recruiter
- doesn't hurt to ask for feedback so that u can improve
- when you will hear back
- don't overuse "I"
- talk bout the interviewer
- express how you are the ideal candidate
- don't brag
- watch the video for a closing statement of how much you want the job